[{"title":"React-Native踩过的坑---分享篇","date":"2017-03-17T08:20:25.000Z","path":"2017/03/17/reactNative/reactNativeError/","text":"年前开发React-native没有做分享,这几天在完善整个App,记录一下分享功能的一些坑。 错误信息:12com.android.build.api.transform.TransformException: java.util.zip.ZipException:duplicate entry: com/tencent/mm/sdk/a/a$a.class 是由于微信和umeng重复的引入相同的jar包引起的,解决方法是: 在项目根目录搜索SocialSDK_WeiXin_1.jar,删除此jar包即可。 错误信息:12345UNEXPECTED TOP-LEVEL EXCEPTION:com.android.dex.DexException: Multiple dex files define Landroid/support/v7/appcompat/R$anim;Execution failed for task &apos;:app:dexDebug&apos;.&gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &apos;command &apos;/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/bin/java&apos;&apos; finished with non-zero exit value 2 未知原因,google了好久,终于在我大神奇github网站的某一篇文章中找到了解决方法。只需要在项目根目录,执行命令:1cd android &amp;&amp; ./gradlew clean 错误信息：1234567** BUILD FAILED **The following build commands failed: CompileC /Users/tveloso/Library/Developer/Xcode/DerivedData/ABC-dbvlmexxbrkpqubvzgqzuzdlxptp/Build/Intermediates/Pods.build/Debug-iphoneos/Pods-ABC-Realm.build/Objects-normal/armv7/external_commit_helper.o Realm/Realm/ObjectStore/impl/apple/external_commit_helper.cpp normal armv7 c++ com.apple.compilers.llvm.clang.1_0.compiler(1 failure)None 解决方法：Simply switch off Enable Modules (C and Objective-C) in the target for ‘Realm’. 错误信息：1RCTRootView.h file not found 如果确定文件一定安装，那么请尝试以下方法： 需要把 Building Setting 里的Header Search Paths属性的值 “${PODS_ROOT}/Headers/Public/React” - not-recursive 改为 recursive 就可以了，由于Pods里的React结构改变了，但配置没有改过来，所以出现找不到文件的问题。 错误信息：123&apos;React/RCTBridgeModule.h&apos; file not foundorfatal error: &apos;React/RCTBridgeModule.h&apos; #390 解决方法： Open ios/[project-name].xcodeproj with XCode In the left panel (Project Navigator), navigate to Libraries/RNVectorIcons.xcodeproj/RNVectorIconsManager In RNVectorIconsManager.h and RNVectorIconsManager.m, remove the React/ prefix from all includes, for example: #import &lt;React/RCTConvert.h&gt; =&gt; #import &lt;RCTConvert.h&gt; 中间陆续也踩了好多坑哎,最后实现了效果。","tags":[{"name":"react-native","slug":"react-native","permalink":"http://www.luojh.me/tags/react-native/"},{"name":"react-native-wechat","slug":"react-native-wechat","permalink":"http://www.luojh.me/tags/react-native-wechat/"}]},{"title":"canvas贝塞尔曲线总结","date":"2017-03-07T08:20:25.000Z","path":"2017/03/07/html/canvas1/","text":"最近在学习canvas,记录一下贝塞尔曲线的两个使用方法: quadraticCurveTo(); bezierCurveTo(); 定义和用法quadraticCurveTo() 方法通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点。提示：二次贝塞尔曲线需要两个点。 第一个点是用于二次贝塞尔计算中的控制点。 第二个点是曲线的结束点。曲线的开始点是当前路径中最后一个点。 如果路径不存在，那么请使用 beginPath() 和 moveTo() 方法来定义开始点。 开始点：moveTo(20,20) 控制点：quadraticCurveTo(20,100,200,20) 结束点：quadraticCurveTo(20,100,200,20) 语法1context.quadraticCurveTo(cpx,cpy,x,y); 参数值 参数 描述 cpx 贝塞尔控制点的 x 坐标 cpy 贝塞尔控制点的 y 坐标 x 结束点的 x 坐标 y 结束点的 y 坐标 定义和用法bezierCurveTo() 方法通过使用表示三次贝塞尔曲线的指定控制点，向当前路径添加一个点。提示：三次贝塞尔曲线需要三个点。前两个点是用于三次贝塞尔计算中的控制点，第三个点是曲线的结束点。曲线的开始点是当前路径中最后一个点。如果路径不存在，那么请使用 beginPath() 和 moveTo() 方法来定义开始点。 开始点：moveTo(20,20) 控制点 1：bezierCurveTo(20,100,200,100,200,20) 控制点 2：bezierCurveTo(20,100,200,100,200,20) 结束点：bezierCurveTo(20,100,200,100,200,20) 语法1context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y); 参数值 参数 描述 cp1x 第一个贝塞尔控制点的 x 坐标 cp1y 第一个贝塞尔控制点的 y 坐标 cp2x 第二个贝塞尔控制点的 x 坐标 cp2y 第二个贝塞尔控制点的 y 坐标 x 结束点的 x 坐标 y 结束点的 y 坐标 实践基本语法学习完了,就开始自己动手画图啦。首先,来个简单一点的,两个C字母组合吧:12345678910111213141516context.lineWidth = 5;context.strokeStyle = &quot;green&quot;;context.moveTo(50, 50);context.bezierCurveTo(50, 50, 150, 50, 150, 150);context.stroke();context.quadraticCurveTo(150, 250, 50, 250);context.stroke();context.beginPath();context.strokeStyle = &quot;red&quot;;context.moveTo(260, 50);context.quadraticCurveTo(155, 50, 155, 155);context.stroke();context.bezierCurveTo(155, 155, 155, 250, 250, 250);context.stroke(); 效果如图: 恩,感觉还不错,接着画一个😊的表情吧:1234567891011121314151617context.beginPath();context.lineCap = &quot;round&quot;;context.strokeStyle = &quot;black&quot;;context.moveTo(300, 80);context.quadraticCurveTo(312, 40, 360, 50);context.stroke();context.moveTo(500, 80);context.quadraticCurveTo(490, 40, 445, 50);context.stroke();context.beginPath();context.lineJoin = &quot;round&quot;;context.moveTo(340, 150);context.quadraticCurveTo(405, 230, 470, 150);context.quadraticCurveTo(405, 200, 340, 150);context.stroke(); 丑到爆的微笑表情😔,耐着性子看吧~~至此,Canvas简单的曲线方法使用就结束了,也是难以理解,只有一步一步的写例子,才能加深理解,这就是个人的学习方式吧。","tags":[{"name":"canvas","slug":"canvas","permalink":"http://www.luojh.me/tags/canvas/"},{"name":"html","slug":"html","permalink":"http://www.luojh.me/tags/html/"}]},{"title":"2017-岂止于心","date":"2017-02-10T04:20:25.000Z","path":"2017/02/10/books/","text":"16年毕业后,工作到现在也已经一年有余,从一个不懂世俗的单纯小子到步入职场的小骚年,身份却没有来的及转换过来,导致16年生活,工作安排的混乱不堪,幸得公司年假放了20天有余,得以在这些天内,沉静下来,理清现状,思考如何改变。所以,2017年有了下列计划: 读书,填充头脑 解忧杂货铺 【东野圭吾】 白夜行 【东野圭吾】 猫鼠游戏 [弗兰克·W·阿巴格内尔/斯坦·雷丁(著)] ReactNative跨平台移动应用开发 【阙喜涛】 世界上的另一个你全集 平凡的世界 人生 【路遥】 与时间做朋友 【李笑来】 深入React技术栈 【陈屹】 Js函数式编程 三体全集(ing)[刘慈欣] 我们仨 无声告白 人类简史:从动物到上帝 岛上书店 如何闻读一本书 总控力 查令十字街84号 嫌疑人X的现身 追风筝的人 牛奶可乐经济学 最好的我们 天才在左疯子在右 把你的英语用起来 把时间当朋友 围城 乌合之众 跟任何人都能聊得来 耶路撒冷三千年 偷影子的人 苏菲的世界 了不起的盖茨比 不速之客的自助餐 活着 当我跑步时,我谈些什么 时间简史(插图版) 金瓶梅 魔鬼经济学: 揭示隐藏在表象之下的真实世界 必然 影响力 一直特立独行的猪 局外人 目送 秘密 悟空传 拖延心理学 经济学通识 像TED一样演讲 我讲个笑话,你可别哭啊 1984 爱你就像爱生命 你只是看起来很努力 上述52本书籍,挑选了来自于Kindle2016Top100里面的其中一部分,其中包含了,技术,文学,经济,心理,科技等多个种类的书籍,幸好我对于书籍没有抵触心理,在过年的那段时间内,我陆续读完了5本书,这也培养了我在空闲时间内去读书的习惯,也一定要继续坚持下去,争取年内把这些书都读完。 备注: 中划线的是看完的,其余的按照心情选择阅读。 画画虽然那么喜欢油彩画,但是在考虑学习成本,空间,时间后,选择以色铅简笔画为基础,培养兴趣的学习绘画,已达到静心养性的最高心里境界吧。罗列两三本正在学的简笔画书籍,有兴趣的可以一块学,一块交流,后期附上我的作品啦,哈哈哈 色铅笔技法从入门到精通 色铅笔手绘纯美人像 Free在懒散之余,练习硬笔书法,魔方,瑜伽。后期会附上我的魔方教学帖子,供以后回忆~~ 总结总的来说,新的一年,总是要努力一下,与其碌碌无为,不如平心而为,做些有趣的事情,提升自己。毕竟,我和小米都:永远相信美好的事情，即将发生。 一生最重 不过饱餐与被爱","tags":[{"name":"Book","slug":"Book","permalink":"http://www.luojh.me/tags/Book/"}]},{"title":"Hexo搭建个人博客","date":"2017-02-08T04:20:25.000Z","path":"2017/02/08/FirstArticle/","text":"过完新年,在公司闲来无事,便索性想搭建自己的博客系统,其实这个想法很早就有了,不过16年太过于忙碌,生活工作节奏太乱,没有好好沉静,反思和沉淀。其实好多事情,在没有经历过,会觉得那些东西看起来如此牛逼,但是真正经历了,自己做了之后,会发现,牛逼的不仅是那些事,还有自己~~此篇教程是纪念我花费在博客上面的所有逝去的时间🌺 ,并且帮助那些想要建立博客的同学们☀️。那么,现在直接奉上搭建步骤: Hexo? Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. 大致解释是:Hexo是一个快速，简单和强大的博客框架。你写的Markdown（或其他语言）的帖子Hexo在几秒钟内就能生成静态文件; 环境配置安装Hexo非常容易。但是，你需要先安装几个其他的东西： Node.js作用：用来生成静态页面的 到Node.js官网下载相应平台的最新版本，一路安装即可。官网入口 Github账号作用：用来做博客的远程创库、域名、静态资源服务器。怎么申请github的账号和ssh key等,请大家自行搜索,网络上资源还是很丰富的。 正式安装Hexonodejs和git都安装好后，可执行如下命令安装hexo：1sudo npm install -g hexo 初始化创建一个文件夹，如：Blog，进入到Blog里分别执行init命令和安装依赖命令：12hexo initnpm install 生成静态页面继续再Blog目录下执行如下命令，生成静态页面:1hexo generate （hexo g 也可以） 安装hexo-server插件1sudo npm install hexo-server 本地启动启动本地服务，进行文章预览调试，命令：1hexo server (hexo s 也可以) 浏览器输入localhost:4000进行预览博客网站,是不是很简陋呢,但是好歹有一个自己的家园了,也是很兴奋呢。但是现在都是在本地进行的,需要和github进行关联。 配置Github建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法 然后建立关联,例如我的是:luojinghui.github.io,此时,你的目录应该是这样子: Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要修改_config.yml文件，用编辑器打开,翻到最后,改成这个样子(注意冒号后面的空格): 1234deploy: type: git repository: https://github.com/luojinghui/luojinghui.github.io branch: master 执行如下命才能使用git部署(只需要执行一次): 1npm install hexo-deployer-git --save 执行这个命令进行部署: 1hexo deploy 然后再浏览器中输入 http://luojinghui.github.io 就行了，我的 github 的账户叫 luojinghui ,把这个改成你 github 的账户名就行了 备注 每次部署的步骤，可按以下三步来进行: 123hexo cleanhexo generatehexo deploy 简写: 12hexo cleanhexo g -d 一些常用命令： 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help #查看帮助hexo version #查看Hexo的版本 主题 这里面有很多主题,可以参考: 入口 图片路径 1.文章在 source/_posts下新建以.md为结尾的文件，编辑器可以用Webstrom、Sublime，支持 markdown 语法 2.修改头像可以直接在主题里的 _config.yml 文件里面修改，友情链接，之类的都在这里 3.创建文章的文件开头格式,可以用我现用的格式去写: 12345678910---title: 填写标题tags: - tag1- tag2date: 2016/6/06 12:20:25reward: 是否支持打赏,填写true或者falsekeywords: 关键词1 关键词2...description: 填写描述--- 4.如果想引用本地图片路径,以根路径作为起始点,就可以了。例如: /img/logo.png 开始打理你的博客吧，有什么问题下面留言,我会回复的。 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？ 答：在文章中加一个 &lt;!--more--&gt; ， &lt;!--more--&gt; 后面的内容就不会显示出来了。 问：如何添加多说评论? 答：在主题里的 _config.yml中找到duoshuo:,冒号后面填写你在多说申请用的域名,例如,我申请的是luojinghui.duoshuo.com,那么,在这里就填写luojinghui,就好了 转载请注明原地址，luojh的博客：http://luojh.me 谢谢！ 一生最重 不过饱餐与被爱","tags":[{"name":"Blog","slug":"Blog","permalink":"http://www.luojh.me/tags/Blog/"},{"name":"Personal","slug":"Personal","permalink":"http://www.luojh.me/tags/Personal/"},{"name":"教程","slug":"教程","permalink":"http://www.luojh.me/tags/教程/"}]},{"title":"LDialog-强大的jquery弹窗插件","date":"2016-06-06T04:20:25.000Z","path":"2016/06/06/ldialog/","text":"前一阵子基于jquery开发,项目中遇到了大量的弹窗组件,每个都是重复复制。最近闲下来了,便花费了几天时间,写了此蒙版插件。基于jquery开发，能够适用于所有的弹出对话，弹出，确认，tip，msg提示框等。支持ie9+以及其他新款浏览器。 How to install npm 1npm install --save-dev ldialog bower 1bower install --save-dev ldialog How to use 在头部引入ldialog.css或者压缩过的ldialog.min.css文件,**同时将fonts字体图标文件放置在css同级目录中。 1&lt;link rel=\"stylesheet\" href=\"../css/ldialog.css\"/&gt; 引入jquery以及ldialog.js文件： 12&lt;script src=\"../js/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"../js/ldialog.js\"&gt;&lt;/script&gt; 当在监听事件中需要弹出对话框或蒙版时，实例化一个蒙版，并初始化,例如：12var dialog = new LDialog(\"test2\");dialog.init(); 就是这么简单,可能有同学想说,为什么创建一个蒙版还是有些麻烦,其实后面还有通过方法创建蒙版,请接着看完文档哦。 LDialog参数说明 new LDialog（arg1, arg2, arg3）可以传入（选填）三个参数： arg1 (字符串) 参数名 数据类型 默认值 描述 备注 arg1 String null 重写蒙版显示内容 可以是纯文本，也可以是html代码 arg2 (对象) 参数名 数据类型 默认值 描述 备注 bg String “” 定义蒙版背景颜色，默认为白色背景 btn Obj { } 定义按钮组 可定义两个按钮，对应的参数是：sure和cancel sure 定义确定按钮样式，值既可以引用已写好的class，也可以为按钮的颜色值；若只需要其中某一个按钮，只定义一个即可 例如：sure: “l-btn-default” 或者 sure: “red” cancel 定义取消按钮样式，用法和sure相同 例如：cancel: “l-btn-default” 或者 cancel: “#eeeeee” cancelTitle String “取消” 重写蒙版底部取消按钮显示文字 sureTitle String “确定” 重写蒙版底部确定按钮显示文字 enterAni String “fadeIn” 定义蒙版进入动画 可自定义引入animate.css动画库的动画class，插件预加载了常用的几种动画 fontColor String “” 定义蒙版字体颜色 footer boolean true 定义蒙版底部按钮组框架是否显示 globalClose boolean false 定义蒙版是否全局关闭 点击蒙版以外区域关闭蒙版 header boolean true 定义蒙版标题模块是否显示 icon boolean true 定义蒙版内容块图标是否显示 iconColor String null 定义内容块左边图标大小 iconData String null 定义图标源 若arg3参数也定义此参数，以arg2参数定义为准 iconSize String null 定义内容块左边图标大小 minHeight String “50px” 定义蒙版最低高度 move boolean true 定义蒙版是否支持拖拽 moveType Number 1 定义蒙版拖拽方式，可选1或者2 1代表经典方式，2代表黑框方式 moveOut boolean false 定义蒙版是否可以拖拽出显示区域 默认不可以 onCancel function null 点击取消按钮的回调函数 onClose function null 点击关闭按钮的回调函数 onGClose function null 点击全局关闭回调函数 onIsNull(posi,i) function true input输入框回调函数,参数posi为当前input的选择器，i代表此input的序号，函数默认返回true onSure(data) function null 点击确定按钮的回调函数,可选data参数，获得所有蒙版input输入框的中的值，以数组形式展现 onSureBefore function null 点击确定按钮前执行的回调函数 和onSure相比，此函数执行时动画效果还未执行 onTimeOut function null 倒计时完毕后的回调函数 opacity Number 0.5 定义蒙版透明度 outline boolean false 定义是否显示outline效果 类似facebook蒙版效果,常用于操作成功的提示信息 radius Strig “2px” 定义蒙版的圆角 shadow String “” 定义蒙版阴影 subtitle String null 定义副标题内容 timeOut Number -1 定义蒙版显示多长时间后消失 默认使用-1代表不消失 title String “初始化标题” 定义蒙版标题 若arg3参数也定义此参数，以arg2参数定义为准 verCenter boolean true 定义蒙版是否居中显示 默认居中，当不居中时，默认距顶部40px width String “450px” 定义蒙版宽度 input Array [ ] 定义输入框组 可配置多个输入框组，参数如下： verCenter 默认：false 输入框组居中显示，设置为真时，leftInfo参数不可用 value 默认：”” 输入框组设定value值 placeH 默认：”” 默认input显示内容 maxlength 默认：”” 输入最多长度字符数 type 默认：”text” 设置输入类型，例如：text，textarea，date， email… notNull 默认：false 设置是否为空 leftInfo 默认：”” 设置input左边文字 说明： 内容左边引用的是字体图标，属性是iconData，插件默认引用了52个常用的字体图标，下面有预览入口，用法如图： 进入查看图片：传送门 arg3(对象、字符串)已经预定义了几组类型的蒙版显示效果，分别是： info、 success 、error 、 confirm 、 input 、 bim、 custom 当使用时，直接赋值给arg3参数相应的字符串即可。 具体形式如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758var popType = &#123; info: &#123; title: \"信息\", btn: &#123; sure: \"l-btn-info\", cancel: \"l-btn-default\" &#125;, iconData: \"\" &#125;, success: &#123; title: \"成功\", btn: &#123; sure: \"l-btn-success\", cancel: \"l-btn-default\" &#125;, iconData: \"\", iconColor: \"#56BD9D\" &#125;, error: &#123; title: \"错误\", btn: &#123; sure: \"l-btn-error\", cancel: \"l-btn-default\" &#125;, iconData: \"\", iconColor: \"#c9302c\" &#125;, confirm: &#123; title: \"提示\", btn: &#123; sure: \"l-btn-warning\", cancel: \"l-btn-default\" &#125;, iconData: \"\", iconColor: \"#F0AD4E\" &#125;, input: &#123; title: \"输入\", btn: &#123; sure: \"l-btn-primary\", cancel: \"l-btn-default\" &#125; &#125;, bim: &#123; title: \"提示\", btn: &#123; sure: \"l-btn-bim\", cancel: \"l-btn-default\" &#125; &#125;, custom: &#123; title: \"初始化标题\", btn: &#123; sure: \"l-btn-primary\", cancel: \"l-btn-default\" &#125; &#125;&#125;; 按钮组预定了6组： l-btn-default 、 l-btn-primary 、 l-btn-error 、 l-btn-success 、 l-btn-info、 l-btn-warning 样式可在底部demo页面中查看 方法 LDialog.prompt(value, con, fun) 弹出类似系统的prompt对话框，默认含有一个input输入框。 value：必填，显示的文字，可以为空。con： 选填，配置样式，可使用插件arg2的参数fun： 选填，确认按钮的回调函数，用来获得数据，处理数据 example： 1234567891011121314151617181920var con = &#123; input: [&#123; type: \"textarea\" &#125;], width: \"400px\", onIsNull: function(position, i) &#123; if(position.val() === \"\") &#123; position.focus(); LDialog.tips(\"请输入正确的值,\",position, &#123;posi: 2&#125;); return false; &#125; return true; &#125;&#125;;LDialog.prompt(\"\", con, function(v) &#123; if(v[0] !== \"\") &#123; LDialog.closeAllTips(); console.log(v); &#125;&#125;); LDialog.alert(value, con, fun) example: 12345LDialog.alert(\"123123123123123\");LDialog.alert(\"123123123123123\", function() &#123; console.log(\"点击确定按钮了！\");&#125;); 和prompt方法使用相同，但是alert只有确定按钮，没有input输入框。 LDialog.confirm(value, con, fun) example: 123LDialog.confirm(value, &#123;iconData: \"\"&#125;, function() &#123; LDialog.msg(\"删除成功！\", &#123;iconData: \"\", iconColor: \"green\", iconSize: \"30px\"&#125;);&#125;); 和prompt方法使用相同，但是confirm没有input输入框。 LDialog.msg(value, con, fun) value：必填，显示的文字，可以为空。con： 选填，配置样式，可使用插件arg2的参数fun： 选填，倒计时过后的回调函数，用来阻断函数执行。 example: 123LDialog.msg(\"删除成功！\", &#123;iconData: \"\"&#125;, function() &#123; console.log(123); &#125;); LDialog.tip(value, con, fun) 和msg方法使用相同，但样式不同。 LDialog.tips(value, selector, con) value：必填，显示的文字，可以为空。selector： 必填，显示tips出现的位置，可以为任意jquery的选择器。con： 选填，用来配置tips显示效果，具体参数如下： posi: 2, //默认显示在选择器的右边位置，可定义分别对应的位置： 1：上， 2： 右， 3： 下， 4： 左 bg: \"#000\", //定义tips背景色，默认为黑色 color: \"#fff\", //定义tips文字颜色，默认为白色 maxWidth: \"150\", //定义tips最大宽度，默认为150px timeOut: 2000, //定义tips多少秒后消失。 tipsClose: $.noop //定义tips倒计时回调函数 Live Demo插件demo：传送门 字体图标： 传送门 git地址： 传送门 版本 Version 1.0.0 ：完成蒙版基础功能。 Version 1.0.1 ：增加蒙版居中、全局关闭、自定义进入动画、outline功能。 Version 1.0.2 ：增加对sea.js的支持。 Version 1.0.3 ：增加蒙版实时居中，增加蒙版多种拖拽方式的功能。 Version 1.0.4 ：增加了tip，confirm，msg，prompt，的插件方法，能够快速创建蒙版，并执行回调。 Version 1.0.5 ：修改了一些bug，增加tips指示框方法，能够快速定位到想要出现的位置。 一生最重 不过饱餐与被爱","tags":[{"name":"jquery","slug":"jquery","permalink":"http://www.luojh.me/tags/jquery/"},{"name":"ldialog","slug":"ldialog","permalink":"http://www.luojh.me/tags/ldialog/"},{"name":"model","slug":"model","permalink":"http://www.luojh.me/tags/model/"}]},{"title":"利用css3画各种几何图形(-)","date":"2016-03-10T08:20:25.000Z","path":"2016/03/10/css/index/","text":".main { margin: 20px; } .inline { display: inline-block; margin-left: 20px; vertical-align: middle; } .rectangle { width: 100px; height: 80px; background-color: #669; } .trapezoid { border-bottom: 50px solid #669; border-left: 25px solid transparent; border-right: 25px solid transparent; width: 80px; } .parallelogram { width: 80px; height: 50px; -webkit-transform: skew(-20deg); -moz-transform: skew(-20deg); -o-transform: skew(-20deg); background: #669; } .triangle-up { display: inline-block; border-width: 0px 30px 50px 30px; border-color: transparent transparent #669 transparent; border-style: solid; } .triangle-bottom { display: inline-block; border-width: 50px 30px 0px 30px; border-color: #669 transparent transparent transparent; border-style: solid; } .triangle-left { display: inline-block; border-width: 30px 50px 30px 0px; border-color: transparent #669 transparent transparent; border-style: solid; } .triangle-right { display: inline-block; border-width: 30px 0px 30px 50px; border-color: transparent transparent transparent #669; border-style: solid; } .triangle-updown { width: 0; height: 0; border-left: 46px solid transparent; border-right: 46px solid transparent; border-bottom: 60px solid #669; position: relative; } .triangle-updown:after { content: \" \"; width: 0; height: 0; border-left: 46px solid transparent; border-right: 46px solid transparent; border-top: 60px solid #669; position: absolute; top: 20px; left: -45px; } .triangle-topleft { width: 0; height: 0; border-top: 50px solid #669; border-right: 50px solid transparent; } .triangle-topright { width: 0; height: 0; border-top: 50px solid #669; border-left: 50px solid transparent; } .triangle-bottomleft { width: 0; height: 0; border-left: 50px solid #669; border-top: 50px solid transparent; } .triangle-bottomright { width: 0; height: 0; border-right: 50px solid #669; border-top: 50px solid transparent; } .one { width: 0; height: 0; border-top: 25px solid #669; border-right: 25px solid transparent; border-bottom: 25px solid #669; border-left: 25px solid #669; } .two { width: 0; height: 0; border-top: 25px solid #669; border-right: 25px solid transparent; border-bottom: 25px solid #669; } .three { width: 0; height: 0; border-top: 50px solid #669; border-right: 50px solid transparent; border-left: 50px solid #669; } .four { display: inline-block; border-width: 25px; border-style: solid; border-color: antiquewhite burlywood lightblue lightsalmon; } .solid-ring { width: 50px; height: 50px; border-radius: 999px; background-color: #669; } .circle-circle { width: 50px; height: 50px; border-radius: 999px; background-color: #fff; border: 10px solid #669; } .circle-top { border-radius: 999px 999px 0 0; border-top: 25px solid #669; width: 50px; } .circle-bottom { border-radius: 0 0 999px 999px; border-bottom: 25px solid #669; width: 50px; } .circle-left { width: 25px; border-bottom: 25px solid #669; border-top: 25px solid #669; border-radius: 999px 0 0 999px; } .circle-right { width: 25px; border-bottom: 25px solid #669; border-top: 25px solid #669; border-radius: 0 999px 999px 0; } .circle-top-left { display: inline-block; border: 25px solid #669; border-top-left-radius: 999px; } .circle-top-right { display: inline-block; border: 25px solid #669; border-top-right-radius: 999px; } .circle-bottom-left { display: inline-block; border: 25px solid #669; border-bottom-left-radius: 999px; } .circle-bottom-right { display: inline-block; border: 25px solid #669; border-bottom-right-radius: 999px; } .u { width: 50px; border: 1px solid #669; border-radius: 0 0 999px 999px; height: 25px; } #cut-diamond { border-style: solid; border-color: transparent transparent #669 transparent; border-width: 8px 15px 20px 15px; height: 0; width: 50px; position: relative; margin-bottom: 24px; } #cut-diamond:after { content: \"\"; position: absolute; top: 19px; left: -15px; width: 0; height: 0; border-style: solid; border-color: #669 transparent transparent transparent; border-width: 35px 25px 0 25px; } .egg { width: 35px; height: 50px; background-color: #669; border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%; } #infinity { position: relative; width: 104px; height: 50px; } #infinity:before, #infinity:after { content: \"\"; position: absolute; top: 0; left: 0; width: 50px; height: 50px; border: 11px solid #669; border-radius: 50px 50px 0 50px; transform: rotate(-45deg); } #infinity:after { left: auto; right: 0; border-radius: 50px 50px 50px 0; transform: rotate(45deg); } .heart { position: relative; width: 50px; height: 50px; } .heart:before, .heart:after { position: absolute; content: \"\"; left: 0px; top: 0; width: 30px; height: 50px; background-color: #669; border-radius: 999px 999px 0 0; transform: rotate(-45deg); } .heart:after { transform: rotate(45deg); left: 14px; } .star-five { display: inline-block; position: relative; border-right: 10px solid transparent; border-bottom: 25px solid #669; border-left: 10px solid transparent; margin-bottom: 34px; } .star-five:before, .star-five:after { position: absolute; content: \"\"; border-right: 25px solid #669; border-top: 35px solid transparent; border-bottom: 35px solid transparent; transform: rotate(54deg); left: -15px; top: -2px; } .star-five:after { content: \"\"; transform: rotate(125deg); top: -2px; left: -11px; } .tail-left-top { border: 0 solid transparent; border-top: 25px solid #669; border-radius: 55px 0 0 0; width: 55px; height: 50px; } .tail-right-top { width: 55px; height: 50px; border: 0 solid transparent; border-top: 25px solid #669; border-radius: 0 55px 0 0; } .tail-left-bottom { width: 55px; height: 50px; border: 0 solid transparent; border-bottom: 25px solid #669; border-radius: 0 0 0 55px; } .tail-right-bottom { width: 55px; height: 50px; border: 0 solid transparent; border-bottom: 25px solid #669; border-radius: 0 0 55px 0; } .talk-box { width: 100px; height: 50px; border-radius: 6px; background-color: #669; position: relative; margin-left: 49px; } .talk-box:after { content: \"\"; position: absolute; border: 0 solid transparent; width: 27px; height: 40px; bottom: -21px; left: -26px; border-top: 15px solid #669; border-radius: 55px 0 0 0; } .tips { position: relative; width: 120px; height: 46px; background-color: #fff; border: 1px solid #669; border-radius: 6px; padding: 2px; text-align: center; } .tips:before { content: \"\"; position: absolute; left: -15px; top: 17px; border-top: 7px solid transparent; border-bottom: 7px solid transparent; border-right: 15px solid #669; } .tips:after { content: \"\"; position: absolute; left: -13px; top: 18px; border-top: 6px solid transparent; border-bottom: 6px solid transparent; border-right: 13px solid #fff; } pre { background-color: #eee!important; border: none!important; text-shadow: none!important; border-radius: 4px!important; padding: 15px!important; } .mt10 { margin-top: 20px; } .mb30 { margin-bottom: 30px; } .mb50 { margin-bottom: 50px; } .ml20 { margin-left: 20px; } 早前学习css3的练习,通过纯css实现基本的图形,熟悉css的属性应用。今天抽空整理出来,分享给想要学习css的同学。 .rectangle { width: 100px; height: 80px; background-color: #669; } .trapezoid { border-bottom: 50px solid #669; border-left: 25px solid transparent; border-right: 25px solid transparent; width: 80px; } .parallelogram { width: 80px; height: 50px; -webkit-transform: skew(-20deg); -moz-transform: skew(-20deg); -o-transform: skew(-20deg); background: #669; } .triangle-up { display: inline-block; border-width: 0px 30px 50px 30px; border-color: transparent transparent #669 transparent; border-style: solid; } .triangle-bottom { border-width: 50px 30px 0px 30px; border-color: #669 transparent transparent transparent; border-style: solid; } .triangle-left { display: inline-block; border-width: 30px 50px 30px 0px; border-color: transparent #669 transparent transparent; border-style: solid; } .triangle-right { display: inline-block; border-width: 30px 0px 30px 50px; border-color: transparent transparent transparent #669; border-style: solid; } .triangle-updown { width: 0; height: 0; border-left: 46px solid transparent; border-right: 46px solid transparent; border-bottom: 60px solid #669; position: relative; } .triangle-updown:after { content: \" \"; width: 0; height: 0; border-left: 46px solid transparent; border-right: 46px solid transparent; border-top: 60px solid #669; position: absolute; top: 20px; left: -45px; } .triangle-topleft { width: 0; height: 0; border-top: 50px solid #669; border-right: 50px solid transparent; } .triangle-topright { width: 0; height: 0; border-top: 50px solid #669; border-left: 50px solid transparent; } .triangle-bottomleft { width: 0; height: 0; border-left: 50px solid #669; border-top: 50px solid transparent; } .triangle-bottomright { width: 0; height: 0; border-right: 50px solid #669; border-top: 50px solid transparent; } .one { width: 0; height: 0; border-top: 25px solid #669; border-right: 25px solid transparent; border-bottom: 25px solid #669; border-left: 25px solid #669; } .two { width: 0; height: 0; border-top: 25px solid #669; border-right: 25px solid transparent; border-bottom: 25px solid #669; } .three { width: 0; height: 0; border-top: 50px solid #669; border-right: 50px solid transparent; border-left: 50px solid #669; } .four { display: inline-block; border-width: 25px; border-style: solid; border-color: antiquewhite burlywood lightblue lightsalmon; } .solid-ring { width: 50px; height: 50px; border-radius: 999px; background-color: #669; } .circle-circle { width: 50px; height: 50px; border-radius: 999px; background-color: #fff; border: 10px solid #669; } .circle-top { border-radius: 999px 999px 0 0; border-top: 25px solid #669; width: 50px; } .circle-bottom { border-radius: 0 0 999px 999px; border-bottom: 25px solid #669; width: 50px; } .circle-left { width: 25px; border-bottom: 25px solid #669; border-top: 25px solid #669; border-radius: 999px 0 0 999px; } .circle-right { width: 25px; border-bottom: 25px solid #669; border-top: 25px solid #669; border-radius: 0 999px 999px 0; } .circle-top-left { display: inline-block; border: 25px solid #669; border-top-left-radius: 999px; } .circle-top-right { display: inline-block; border: 25px solid #669; border-top-right-radius: 999px; } .circle-bottom-left { display: inline-block; border: 25px solid #669; border-bottom-left-radius: 999px; } .circle-bottom-right { display: inline-block; border: 25px solid #669; border-bottom-right-radius: 999px; } .u { width: 50px; border: 1px solid #669; border-radius: 0 0 999px 999px; height: 25px; } #cut-diamond { border-style: solid; border-color: transparent transparent #669 transparent; border-width: 8px 15px 20px 15px; height: 0; width: 50px; position: relative; margin-bottom: 24px; } #cut-diamond:after { content: \"\"; position: absolute; top: 19px; left: -15px; width: 0; height: 0; border-style: solid; border-color: #669 transparent transparent transparent; border-width: 35px 25px 0 25px; } .egg { width: 35px; height: 50px; background-color: #669; border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%; } #infinity { position: relative; width: 104px; height: 50px; } #infinity:before, #infinity:after { content: \"\"; position: absolute; top: 0; left: 0; width: 50px; height: 50px; border: 11px solid #669; border-radius: 50px 50px 0 50px; transform: rotate(-45deg); } #infinity:after { left: auto; right: 0; border-radius: 50px 50px 50px 0; transform: rotate(45deg); } .heart { position: relative; width: 50px; height: 50px; } .heart:before, .heart:after { position: absolute; content: \"\"; left: 0px; top: 0; width: 30px; height: 50px; background-color: #669; border-radius: 999px 999px 0 0; transform: rotate(-45deg); } .heart:after { transform: rotate(45deg); left: 14px; } .star-five { display: inline-block; position: relative; border-right: 10px solid transparent; border-bottom: 25px solid #669; border-left: 10px solid transparent; margin-bottom: 34px; } .star-five:before, .star-five:after { position: absolute; content: \"\"; border-right: 25px solid #669; border-top: 35px solid transparent; border-bottom: 35px solid transparent; transform: rotate(54deg); left: -15px; top: -2px; } .star-five:after { content: \"\"; transform: rotate(125deg); top: -2px; left: -11px; } .tail-left-top { border: 0 solid transparent; border-top: 25px solid #669; border-radius: 55px 0 0 0; width: 55px; height: 50px; } .tail-right-top { width: 55px; height: 50px; border: 0 solid transparent; border-top: 25px solid #669; border-radius: 0 55px 0 0; } .tail-left-bottom { width: 55px; height: 50px; border: 0 solid transparent; border-bottom: 25px solid #669; border-radius: 0 0 0 55px; } .tail-right-bottom { width: 55px; height: 50px; border: 0 solid transparent; border-bottom: 25px solid #669; border-radius: 0 0 55px 0; } .talk-box { width: 100px; height: 50px; border-radius: 6px; background-color: #669; position: relative; margin-left: 49px; } .talk-box:after { content: \"\"; position: absolute; border: 0 solid transparent; width: 27px; height: 40px; bottom: -21px; left: -26px; border-top: 15px solid #669; border-radius: 55px 0 0 0; } luojh.me .tips { position: relative; width: 120px; height: 46px; background-color: #fff; border: 1px solid #669; border-radius: 6px; padding: 2px; text-align: center; } .tips:before { content: \"\"; position: absolute; left: -15px; top: 17px; border-top: 7px solid transparent; border-bottom: 7px solid transparent; border-right: 15px solid #669; } .tips:after { content: \"\"; position: absolute; left: -13px; top: 18px; border-top: 6px solid transparent; border-bottom: 6px solid transparent; border-right: 13px solid #fff; } 一生最重 不过饱餐与被爱","tags":[{"name":"css3","slug":"css3","permalink":"http://www.luojh.me/tags/css3/"}]},{"title":"Scss学习笔记","date":"2016-01-12T04:20:25.000Z","path":"2016/01/12/css/scss-demo/","text":"Scss的学习笔记,记录下来,以此纪念。 语法 sass 有两种语法。 第一种被称为 SCSS (sassy CSS)，是一个 CSS3 语法的扩充版本，本片教程就是基于此语法。 第二种比较老的语法成为缩排语法（或者就称为 “sass”）， 提供了一种更简洁的 CSS 书写方式。 它不使用花括号，而是通过缩排的方式来表达选择符的嵌套层级，I 而且也不使用分号，而是用换行符来分隔属性。 任一语法都可以导入另一种语法撰写的文件中。 只要使用 sass-convert 命令行工具，就可以将一种语法转换为另一种语法：12345# 将 sass 转换为 SCSS$ sass-convert style.sass style.scss# 将 SCSS 转换为 sass$ sass-convert style.scss style.sass 使用 sass第一步需要安装sass(mac命令):1gem install sass sass提供四个编译风格的选项：1234567nested：嵌套缩进的css代码，它是默认值。expanded：没有缩进的、扩展的css代码。compact：简洁格式的css代码。compressed：压缩后的css代码。 如果要在命令行中运行 sass ,只要输入:1sass input.scss output.css 生产环境当中，一般使用最后一个选项:1sass --style compressed test.sass test.css 你也可以让sass监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本:12345// watch a filesass --watch ./public/scss/demo1.scss:./public/css/demo1.css// watch a directorysass --style expanded --watch ./public/scss:./public/css 变量,计算sass允许使用变量，所有变量以$开头:123456789101112131415161718$side : left;$fontSize : 18px*2;$var : 2;body &#123; margin: (14px/2); //output: 7px top: 50px + 100px; //output: 150px right: $var * 10%; //output: 20%&#125;.rounded &#123; border-#&#123;$side&#125;-radius: 5px; //output: border-left-radius: 5px&#125;.box &#123; color: #333; font-size: $fontSize; //output: 36px&#125; 嵌套sass允许选择器嵌套:123456789div &#123; h1 &#123; color: red; &#125;&#125;//output: div h1 &#123; color: red;&#125; 属性也可以嵌套，比如border-color属性，可以写成：1234567891011121314p &#123; border: &#123; color: #ddd; width: 1px; style: solid; &#125;&#125;//output: p &#123; border-color: #ddd; border-width: 1px; border-style: solid;&#125; 1234567891011121314.funky &#123; font: 2px/3px &#123; family: fantasy; size: 30em; weight: bold; &#125;&#125;//output:.funky &#123; font: 2px/3px; font-family: fantasy; font-size: 30em; font-weight: bold; &#125; 引用父选择符1234567891011121314a &#123; font-weight: bold; text-decoration: none; &amp;:hover &#123; text-decoration: underline; &#125; body.firefox &amp; &#123; font-weight: normal; &#125;&#125;//output:a &#123; font-weight: bold; text-decoration: none; &#125; a:hover &#123; text-decoration: underline; &#125; body.firefox a &#123; //a标签被移到body属性之后 font-weight: normal; &#125; 注释: /* */ and //sass共有两种注释风格: 标准的CSS注释 /* comment */ ，会保留到编译后的文件。(在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。) 单行注释 // comment，只保留在sass源文件中，编译后被省略。 数据类型sassScript 支持六种主要的数据类型： 数字（例如 1.2、13、10px） 文本字符串，无论是否有引号（例如 “foo”、’bar’、baz） 颜色（例如 blue、#04a3f9、rgba(255, 0, 0, 0.5)） 布尔值（例如 true、false） 空值（例如 null） 值列表，用空格或逗号分隔（例如 1.5em 1em 0 2em、Helvetica, Arial, sans-serif） sassScript 还支持所有其他 CSS 属性值类型， 例如 Unicode 范围和 !important 声明。 然而，它不会对这些类型做特殊处理。 它们只会被当做不带引号的字符串看待。 插入文件sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 sass 文件。 所有引入的 SCSS 和 sass 文件都会被合并并输出一个单一的 CSS 文件。 另外，被导入的文件中所定义的变量或 mixins 都可以在主文件中使用。123@import \"path/filename.scss\";or@import \"path/filename\"; 也可以通过一个 @import 引入多个文件。例如：1@import \"rounded-corners\", \"text-shadow\"; MixinMixin可以重用的代码块,使用@mixin命令，定义一个代码块。1234567891011121314151617181920212223242526272829303132333435@mixin large-text &#123; font: &#123; family: Arial; size: 20px; weight: bold; &#125; color: #ff0000;&#125;@mixin clearfix &#123; display: inline-block; &amp;:after &#123; content: \".\"; display: block; height: 0; clear: both; visibility: hidden; &#125; * html &amp; &#123; height: 1px &#125;&#125;.page-title &#123; @include large-text; padding: 4px; margin-top: 10px;&#125;//output:.page-title &#123; font-family: Arial; font-size: 20px; font-weight: bold; color: #ff0000; padding: 4px; margin-top: 10px; &#125; Mixin Arguments1234567891011121314151617181920212223242526272829@mixin sexy-border($color, $width) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;//Mixins还可以使用正常的变量设置语法为其参数指定默认值。然后当包含mixin时，如果它不传递参数，将使用默认值。例如：p &#123; @include sexy-border(blue, 1in); &#125;//output:p &#123; border-color: blue; border-width: 1in; border-style: dashed; &#125; @mixin sexy-border($color, $width: 1in) &#123; border: &#123; color: $color; width: $width; style: dashed; &#125;&#125;p &#123; @include sexy-border(blue); &#125;//output:p &#123; border-color: blue; border-width: 1in; border-style: dashed; &#125; Keyword ArgumentsMixin也可以使用显式关键字参数。例如，我们上面的例子可以写:12p &#123; @include sexy-border($color: blue); &#125;h1 &#123; @include sexy-border($color: blue, $width: 2in); &#125; 使用...获得所有参数:12345678910111213141516@mixin box-shadow($shadows...) &#123; -moz-box-shadow: $shadows; -webkit-box-shadow: $shadows; box-shadow: $shadows;&#125;.shadows &#123; @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);&#125;//output:.shadows &#123; -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;&#125; 颜色函数sass提供了一些内置的颜色函数，以便生成系列颜色:1234lighten(#cc3, 10%) // #d6d65cdarken(#cc3, 10%) // #a3a329grayscale(#cc3) // #808080complement(#cc3) // #33c 函数可以在sass中定义自己的函数，并在任何值或脚本上下文中使用它们。例如：123456789101112131415$grid-width: 40px;$gutter-width: 10px;@function grid-width($n) &#123; @return $n * $grid-width + ($n - 1) * $gutter-width;&#125;#sidebar &#123; width: grid-width(5); &#125;//output:#sidebar &#123; width: 240px; &#125; //与mixins一样，您可以使用关键字参数调用sass定义的函数。在上面的例子中，我们可以像这样调用函数： #sidebar &#123; width: grid-width($n: 5); &#125; @each123456789101112131415@each $animal in puma, sea-slug, egret, salamander &#123; .#&#123;$animal&#125;-icon &#123; background-image: url('/images/#&#123;$animal&#125;.png'); &#125;&#125;//output:.puma-icon &#123; background-image: url('/images/puma.png'); &#125;.sea-slug-icon &#123; background-image: url('/images/sea-slug.png'); &#125;.egret-icon &#123; background-image: url('/images/egret.png'); &#125;.salamander-icon &#123; background-image: url('/images/salamander.png'); &#125; 看我上面的文章，大家有什么感受呢？你可以按照描述，安装好sass,然后边看边自己用记事本把上面的案例敲一遍，运行一遍，经过这一遍学习之后，相信您已经sass入门了，将来的sass进阶，请看后面的文章了！ 要是您有什么问题，可以留言交流！ 一生最重 不过饱餐与被爱","tags":[{"name":"笔记","slug":"笔记","permalink":"http://www.luojh.me/tags/笔记/"},{"name":"Css3","slug":"Css3","permalink":"http://www.luojh.me/tags/Css3/"},{"name":"Scss","slug":"Scss","permalink":"http://www.luojh.me/tags/Scss/"},{"name":"sass","slug":"sass","permalink":"http://www.luojh.me/tags/sass/"}]}]